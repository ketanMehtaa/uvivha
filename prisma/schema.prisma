generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  mobile                  String    @unique
  password                String?
  email                   String?   @unique
  gender                  String?
  birthDate               DateTime?
  location                String?
  bio                     String?
  photos                  String[]
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  otplessUserId           String?   @unique
  otplessToken            String?
  height                  Float?
  weight                  Float?
  complexion              String?
  physicalStatus          String?
  education               String?
  educationDetails        String?
  occupation              String?
  employedIn              String?
  companyName             String?
  jobTitle                String?
  income                  String?
  maritalStatus           String?
  religion                String?
  caste                   String?
  subcaste                String?
  motherTongue            String?
  familyType              String?
  familyStatus            String?
  fatherOccupation        String?
  motherOccupation        String?
  siblings                String?
  familyLocation          String?
  aboutFamily             String?
  agePreferenceMin        Int?
  agePreferenceMax        Int?
  heightPreferenceMin     Float?
  heightPreferenceMax     Float?
  castePreference         String?
  educationPreference     String?
  occupationPreference    String?
  locationPreference      String?
  maritalStatusPreference String?
  isProfileComplete       Boolean? @default(false)
  profileShare            ProfileShare?
}

model ProfileShare {
  token         String    @id @unique @default(uuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  expiresAt     DateTime
  lastRenewedAt DateTime?
  renewalCount  Int       @default(0)
  viewCount     Int       @default(0)

  @@index([userId])
}
